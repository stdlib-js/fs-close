{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/sync.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar native = require( 'fs' ).close;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Asynchronously closes a file descriptor.\n*\n* @param {NonNegativeInteger} fd - file descriptor\n* @param {Function} clbk - callback to invoke after closing a file descriptor\n* @throws {TypeError} first argument must be a valid file descriptor (nonnegative integer)\n* @throws {TypeError} last argument must be a function\n*\n* @example\n* var openSync = require( '@stdlib/fs-open' ).sync;\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* var fd = openSync( __filename, 'r+' );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* close( fd, done );\n*/\nfunction close( fd, clbk ) { // eslint-disable-line stdlib/no-redeclare\n\tif ( !isNonNegativeInteger( fd ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid file descriptor (nonnegative integer). Value: `%s`.', fd ) );\n\t}\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', clbk ) );\n\t}\n\tnative( fd, clbk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = close;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar close = require( 'fs' ).closeSync; // eslint-disable-line node/no-sync, stdlib/no-redeclare\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Synchronously closes a file descriptor.\n*\n* @param {NonNegativeInteger} fd - file descriptor\n* @throws {TypeError} must provide a valid file descriptor (nonnegative integer)\n* @returns {(Error|void)} an error object or `undefined`\n*\n* @example\n* var openSync = require( '@stdlib/fs-open' ).sync;\n*\n* var fd = openSync( __filename, 'r+' );\n*\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* var err = closeSync( fd );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction closeSync( fd ) {\n\tif ( !isNonNegativeInteger( fd ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a valid file descriptor (nonnegative integer). Value: `%s`.', fd ) );\n\t}\n\ttry {\n\t\tclose( fd );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = closeSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Close a file descriptor.\n*\n* @module @stdlib/fs-close\n*\n* @example\n* var openSync = require( '@stdlib/fs-open' ).sync;\n* var close = require( '@stdlib/fs-close' );\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* var fd = openSync( __filename, 'r+' );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* close( fd, done );\n*\n* @example\n* var openSync = require( '@stdlib/fs-open' ).sync;\n* var closeSync = require( '@stdlib/fs-close' ).sync;\n*\n* var fd = openSync( __filename, 'r+' );\n*\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* var err = closeSync( fd );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["native","require$$0","close","isNonNegativeInteger","require$$1","isPrimitive","isFunction","require$$2","format","require$$3","main","fd","clbk","TypeError","closeSync","sync","err","lib"],"mappings":";;srBAsBIA,EAASC,EAAgBC,MACzBC,EAAuBC,EAAmDC,YAC1EC,EAAaC,EACbC,EAASC,EA0Cb,IAAAC,EAbA,SAAgBC,EAAIC,GACnB,IAAMT,EAAsBQ,GAC3B,MAAM,IAAIE,UAAWL,EAAQ,uGAAwGG,IAEtI,IAAML,EAAYM,GACjB,MAAM,IAAIC,UAAWL,EAAQ,mEAAoEI,IAElGZ,EAAQW,EAAIC,ICvCTV,EAAQD,EAAgBa,UACxBX,EAAuBC,EAAmDC,YAC1EG,EAASD,EAwCb,ICHAG,EAAAN,EACAW,EDZA,SAAoBJ,GACnB,IAAMR,EAAsBQ,GAC3B,MAAM,IAAIE,UAAWL,EAAQ,6FAA8FG,IAE5H,IACCT,EAAOS,GACN,MAAQK,GACT,OAAOA,ICGTf,EAOAS,EAAA,OAAAK,GAKA,IAAAE,EAAAP"}